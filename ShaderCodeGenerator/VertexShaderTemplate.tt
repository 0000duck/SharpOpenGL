<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenTK" #>
<#@ import namespace="OpenTK.Graphics.OpenGL" #>

public interface IVertexShaderInterface
{
<#foreach(var UniformBlockName in VSProgram.GetActiveUniformBlockNames())
{#>
	void Set<#=UniformBlockName#>BlockData(ref <#=UniformBlockName#> Data);
<#}#>	
}

public class VertexShaderBase
{
	ShaderProgram VSProgram;

	public VertexShaderBase(ShaderProgram programObject)
	{
		VSProgram = programObject;
		Initialize();
	}

	public void Initialize()
	{
<#foreach(var UniformBlockName in VSProgram.GetActiveUniformBlockNames())
{#>
		<#=UniformBlockName#>Buffer = new SharpOpenGL.Buffer.DynamicUniformBuffer();
<#}#>
	}
<#foreach(var UniformBlockName in VSProgram.GetActiveUniformBlockNames())
{#>
	SharpOpenGL.Buffer.DynamicUniformBuffer <#=UniformBlockName#>Buffer;
<#}#>

<#foreach(var UniformBlockName in VSProgram.GetActiveUniformBlockNames())
{#>
	public void Set<#=UniformBlockName#>BlockData(ref <#=UniformBlockName#> Data)
	{
		var Loc = VSProgram.GetUniformBlockIndex("<#=UniformBlockName#>");
		<#=UniformBlockName#>Buffer.BindBufferBase(Loc);
		<#=UniformBlockName#>Buffer.BufferWholeData<<#=UniformBlockName#>>(ref Data);
	}
<#}#>
}